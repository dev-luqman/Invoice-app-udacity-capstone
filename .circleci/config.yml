version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy-cluster:
    description: Delete cluster if encounter error.
    parameters:
      clusterName: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Error Found!!! please deleting cluster now!!!"
            eksctl delete cluster --name=<< parameters.clusterName >>

jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install Back-end Package
          command: |
            cd backend
            npm i
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Build Back-end
          command: |
            cd backend && 
            npm run lint

  audit-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm audit

  test-docker-file: 
      docker:
        - image: python:3.7.3-stretch

      working_directory: ~/repo
      steps:
        - checkout
        - run:
            name: install hadolink
            command: |
              # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
        - run:
            name: run test/lint
            command: |
              cd backend
              hadolint Dockerfile
  
  build_backed_to_dockerhub:
    docker:
      - image: cimg/go:1.17
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD 
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
            
      - run:
          name: Store Image Tag - for health  test in production 
          command: |
            ls
            echo $CIRCLE_BUILD_NUM > .circleci/files/store.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/files/store.txt

      - run: 
          name: Save all db varibles in envs file 
          command: |
            ls    
            cd backend
            echo DATABASE_URL=$DATABASE_URL >> .env
            echo NODE_ENV=$NODE_ENV >> .env
            echo PORT=$PORT >> .env
            echo VERSION=$CIRCLE_BUILD_NUM >> .env

      # build and push Docker image
      - run: |
          cd backend
          ls
          cat .env
          TAG=0.1.$CIRCLE_BUILD_NUM
          echo $CIRCLE_BUILD_NUM
          docker build -t invoice-app:$TAG .

          docker image tag invoice-app:$TAG lukhee/invoice-app:circleci.$CIRCLE_BUILD_NUM
          docker image tag invoice-app:$TAG lukhee/invoice-app:latest

          echo $DOCKERHUB_USERNAME | echo $DOCKERHUB_PASSWORD  --password-stdin

          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
          docker push lukhee/invoice-app:circleci.$CIRCLE_BUILD_NUM
          docker push lukhee/invoice-app:latest


  create_cluster_if_not_exit:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install awscli 
          command: |
            # sudo pip3 install awscli
            pip3 install awscli
      - run:
          name: IAM Authenticator
          command: |
            # curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator

            curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64

            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
            aws-iam-authenticator help

      - run:
          name: Install packages (kubectl && eksctl)
          command: |
            curl -LO https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl
            
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: Create eks Cluster if not created
          command: |
            aws cloudformation list-exports > saveFile.txt
            # cat saveFile.txt
            if [ $(grep -i $CLUSTER_NAME saveFile.txt | wc -l) -ge 1 ]
            then
              echo "Cluster already created"
              echo "SetUp Variable for creation of pods"
              curl -d '1'  https://kvdb.io/WXYfE8x6ATuBiPjy2P2upo/${CLUSTER_NAME}

            else
              
              echo "SetUp Variable for creation of pods"
              curl -d '0'  https://kvdb.io/WXYfE8x6ATuBiPjy2P2upo/${CLUSTER_NAME}

              echo "Cluster not found - Please create..."
              eksctl create cluster --name $CLUSTER_NAME

              # eksctl create cluster --name $CLUSTER_NAME --version 1.23 --region us-west-1b --zones us-west-1a,us-west-1b --nodegroup-name $CLUSTER_NAME-nodegroup --node-type t2.small --nodes-min 2 --nodes-max 4 --managed
            fi
      - destroy-cluster:
          clusterName: ${CLUSTER_NAME}
      # SLack Notification if error

  update_to_production:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: IAM Authenticator
          command: |
            # curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator

            curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64

            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
            aws-iam-authenticator help

      - run:
          name: Install packages (kubectl $ eksctl)
          command: |
            # curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.15/2022-10-31/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli

      - run:
          name: Install envsubst
          command: |
            sudo pip3 install envsubst

      - run:
          name: Deploy
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
            cd .circleci/files/production_deployment
            ls
            echo ${CIRCLE_BUILD_NUM}
            kubectl get pods
             # Curl - Check variable for create or update
            SUCCESS=$(curl --insecure  https://kvdb.io/WXYfE8x6ATuBiPjy2P2upo/${CLUSTER_NAME})
            echo $SUCCESS
            if [$SUCCESS==1]
            then
              echo "Create New Deployment"
              kubectl apply -f invoice_deployment.yml
            else
              echo "Rollout and Update Deployment"
              kubectl rollout restart deployment/invoice-node-deployment
            fi
            kubectl get pods
            kubectl get pods
            echo "wait 5secs"
            sleep 5
            kubectl get pods
            echo "wait 5secs"
            sleep 5
            kubectl get pods
            
      - run:
          name: Deployment Update after 15 seconds
          command: |
            echo "result before waiting 15secs"
            # wait 15 seconds
            echo "wait 15secs"
            sleep 15
            kubectl describe pods

  api-health-check:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://a0537a5ddef944cd4ac198c1f4e5409b-1949515716.us-east-1.elb.amazonaws.com:8080/"
            CHECK_VALUE=cat .circleci/files/store.txt
            echo ${CHECK_VALUE}
            if curl "${API_URL}" | grep "v-${CHECK_VALUE}"
            then
              echo "HEY!!!!!!!!!! "
              echo "I AM OK!!! "
              echo "v-${CHECK_VALUE} is updated! "
                return 0
            else
              echo "SAD !!!!!!!!! "
              echo "PLEASE CHECK ME!! "
                return 1
            fi

workflows:
  default:
    jobs:
      # - deploy-infrastructure:
      #     requires: [build-frontend, build-backend]
          # filters:
          #   branches:
          #     only: [master]

      - build-backend
      - audit-backend:
          requires: [build-backend]
      - test-docker-file:
          requires: [audit-backend]
          filters:
            branches:
              only: [master]
      - build_backed_to_dockerhub:
          requires: [audit-backend]
      - create_cluster_if_not_exit:
          requires: [build_backed_to_dockerhub]
      - update_to_production: 
          requires: [create_cluster_if_not_exit]
      - api-health-check:
          requires: [update_to_production]